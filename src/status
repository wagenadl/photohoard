ui/AddRootDialog.cpp:  ui->setupUi(this);
ui/AddRootDialog.cpp:  return ui->location->text();
ui/AddRootDialog.cpp:  return ui->collection->currentText();
ui/AddRootDialog.cpp:  ui->collection->clear();
ui/AddRootDialog.cpp:    ui->collection->addItem(c);
ui/AddRootDialog.cpp:    ui->location->setText(dir);
ui/AddRootDialog.cpp:  QListWidgetItem *item = ui->excluded->currentItem();
ui/AddRootDialog.cpp:  if (ui->excluded->count()==1
ui/AddRootDialog.cpp:      && ui->excluded->item(0)->text() == "none")
ui/AddRootDialog.cpp:    ui->excluded->item(0)->setText(fn);
ui/AddRootDialog.cpp:    ui->excluded->addItem(fn);
ui/AddRootDialog.cpp:  int n = ui->excluded->currentRow();
ui/AddRootDialog.cpp:  if (n>=0 && n<ui->excluded->count())
ui/AddRootDialog.cpp:    ui->excluded->removeItemWidget(ui->excluded->item(n));
ui/AddRootDialog.cpp:  if (ui->excluded->count()==0)
ui/AddRootDialog.cpp:    ui->excluded->addItem("(none)");
ui/AddRootDialog.cpp:  for (int n=0; n<ui->excluded->count(); n++) {
ui/AddRootDialog.cpp:    QString fn = ui->excluded->item(n)->text();
ui/CropControls.cpp:  ui->populate(this);
ui/CropControls.cpp:  ui->reflectLimits(calc);
ui/CropControls.cpp:  ui->modeControls[CropMode::Free]->setChecked(true);
ui/CropControls.cpp:  ui->orientControls[Orient::Auto]->setChecked(true);
ui/CropControls.cpp:  ui->reflectLimits(calc);
ui/CropControls.cpp:  ui->reflectAspect("");
ui/CropControls.cpp:  ui->modeControls[CropMode::Free]->setChecked(true);
ui/CropControls.cpp:  ui->orientControls[Orient::Auto]->setChecked(true);
ui/CropControls.cpp:  ui->reflectLimits(calc);
ui/CropControls.cpp:  ui->reflectAspect(""); 
ui/CropControls.cpp:  if (ui->modeControls[CropMode::Free]->isChecked()) {
ui/CropControls.cpp:      ui->reflectAspect("");
ui/CropControls.cpp:  } else if (ui->modeControls[CropMode::Aspect]->isChecked()) {
ui/CropControls.cpp:  ui->reflectLimits(calc);
ui/CropControls.cpp:  if (ui->orientControls[Orient::Landscape]->isChecked()) {
ui/CropControls.cpp:  } else if (ui->orientControls[Orient::Portrait]->isChecked()) {
ui/CropControls.cpp:  for (Orient k: ui->orientControls.keys())
ui/CropControls.cpp:    if (ui->orientControls[k]->isChecked())
ui/CropControls.cpp:    ui->aspectValues[s] = interpretCustom(ui->customAspect->text(), &ok);
ui/CropControls.cpp:      ui->aspectValues[s] = 1;
ui/CropControls.cpp:  calc->setAspect(ui->aspectValues[s], o);
ui/CropControls.cpp:  ui->reflectAspect(s);
ui/CropControls.cpp:  ui->modeControls[CropMode::Free]->setChecked(true);
ui/Cropper.cpp:  ui->setupUi(this);
ui/Cropper.cpp:  ui->tgt_free->setChecked(true);
ui/Cropper.cpp:  ui->tgt_free->setChecked(true);
ui/Cropper.cpp:  if (ui->orient_auto->isChecked())
ui/Cropper.cpp:  if (ui->orient_landscape->isChecked())
ui/Cropper.cpp:  if (ui->orient_portrait->isChecked())
ui/Cropper.cpp:    ui->orient_auto->setChecked(true);
ui/Cropper.cpp:    ui->orient_portrait->setChecked(true);
ui/Cropper.cpp:    ui->orient_landscape->setChecked(true);
ui/Cropper.cpp:  modes << ui->orient_auto
ui/Cropper.cpp:	<< ui->orient_portrait
ui/Cropper.cpp:	<< ui->orient_landscape;
ui/Cropper.cpp:  rats << ui->rat_1_1
ui/Cropper.cpp:       << ui->rat_5_4
ui/Cropper.cpp:       << ui->rat_4_3
ui/Cropper.cpp:       << ui->rat_3_2
ui/Cropper.cpp:       << ui->rat_7_5
ui/Cropper.cpp:       << ui->rat_16_10
ui/Cropper.cpp:       << ui->rat_16_9
ui/Cropper.cpp:       << ui->rat_297_210
ui/Cropper.cpp:       << ui->rat_110_85
ui/Cropper.cpp:       << ui->rat_1618_1000;
ui/Cropper.cpp:  new InstaBool(ui->tgt_aspect, SIGNAL(toggled(bool)),
ui/Cropper.cpp:  if (!ui->tgt_aspect->isChecked())
ui/Cropper.cpp:    ui->tgt_aspect->setChecked(true);
ui/Cropper.cpp~:  ui->setupUi(this);
ui/ExportDialog.cpp:  ui->setupUi(this);
ui/ExportDialog.cpp:  QPushButton *okb = ui->buttonBox->button(QDialogButtonBox::Ok);
ui/ExportDialog.cpp:    QString dir = ui->destination->text();
ui/ExportDialog.cpp:  ui->format->setCurrentIndex(int(s.fileFormat));
ui/ExportDialog.cpp:  ui->scale->setEnabled(false);
ui/ExportDialog.cpp:  ui->maxdim->setEnabled(false);
ui/ExportDialog.cpp:    ui->rFull->setChecked(true);
ui/ExportDialog.cpp:    ui->rWidth->setChecked(true);
ui/ExportDialog.cpp:    ui->maxdim->setEnabled(true);
ui/ExportDialog.cpp:    ui->rHeight->setChecked(true);
ui/ExportDialog.cpp:    ui->maxdim->setEnabled(true);
ui/ExportDialog.cpp:    ui->rMaxDim->setChecked(true);
ui/ExportDialog.cpp:    ui->maxdim->setEnabled(true);
ui/ExportDialog.cpp:    ui->rMaxDim->setChecked(true);
ui/ExportDialog.cpp:    ui->scale->setEnabled(true);
ui/ExportDialog.cpp:  ui->maxdim->setValue(s.maxdim);
ui/ExportDialog.cpp:  ui->scale->setValue(s.scalePercent);
ui/ExportDialog.cpp:  ui->quality->setValue(s.jpegQuality);
ui/ExportDialog.cpp:  ui->scheme->setCurrentIndex(int(s.namingScheme));
ui/ExportDialog.cpp:  ui->destination->setText(s.destination);
ui/ExportDialog.cpp:  switch (ExportSettings::FileFormat(ui->format->currentIndex())) {
ui/ExportDialog.cpp:    ui->quality->setEnabled(true);
ui/ExportDialog.cpp:    ui->quality->setEnabled(false);
ui/ExportDialog.cpp:  ui->scale->setEnabled(ui->rScale->isChecked());
ui/ExportDialog.cpp:  ui->maxdim->setEnabled(ui->rMaxDim->isChecked()
ui/ExportDialog.cpp:                         || ui->rWidth->isChecked()
ui/ExportDialog.cpp:                         || ui->rHeight->isChecked());
ui/ExportDialog.cpp:  s.fileFormat = ExportSettings::FileFormat(ui->format->currentIndex());
ui/ExportDialog.cpp:    = ui->rFull->isChecked() ? ExportSettings::ResolutionMode::Full
ui/ExportDialog.cpp:    : ui->rWidth->isChecked() ? ExportSettings::ResolutionMode::LimitWidth
ui/ExportDialog.cpp:    : ui->rHeight->isChecked() ? ExportSettings::ResolutionMode::LimitHeight
ui/ExportDialog.cpp:    : ui->rMaxDim->isChecked() ? ExportSettings::ResolutionMode::LimitMaxDim
ui/ExportDialog.cpp:  s.jpegQuality = ui->quality->value();
ui/ExportDialog.cpp:  s.maxdim = ui->maxdim->value();
ui/ExportDialog.cpp:  s.scalePercent = ui->scale->value();
ui/ExportDialog.cpp:  s.namingScheme = ExportSettings::NamingScheme(ui->scheme->currentIndex());
ui/ExportDialog.cpp:  s.destination = ui->destination->text();
ui/ExportDialog.cpp:  QDir d(ui->destination->text());
ui/ExportDialog.cpp:      ui->destination->setText(dir);
ui/FilterDialog.cpp:  ui->setupUi(this);
ui/FilterDialog.cpp:  ui->cMake->clear();
ui/FilterDialog.cpp:  ui->cMake->addItem("Any make");
ui/FilterDialog.cpp:    ui->cMake->insertSeparator(1);
ui/FilterDialog.cpp:    ui->cMake->addItem(m);
ui/FilterDialog.cpp:  QString current = ui->cCamera->currentText();
ui/FilterDialog.cpp:  ui->cCamera->clear();
ui/FilterDialog.cpp:  ui->cCamera->addItem("Any model");
ui/FilterDialog.cpp:      ui->cCamera->insertSeparator(1);
ui/FilterDialog.cpp:      ui->cCamera->addItem(m);
ui/FilterDialog.cpp:      ui->cCamera->setCurrentIndex(2);
ui/FilterDialog.cpp:      ui->cCamera->setEnabled(false);
ui/FilterDialog.cpp:      int idx = ui->cCamera->findText(current);
ui/FilterDialog.cpp:        ui->cCamera->setCurrentIndex(idx);
ui/FilterDialog.cpp:      ui->cCamera->setEnabled(true);    
ui/FilterDialog.cpp:    ui->cCamera->setMaxVisibleItems(models.size()+2);
ui/FilterDialog.cpp:    ui->cCamera->setItemText(0, "Select make first");
ui/FilterDialog.cpp:    ui->cCamera->setEnabled(false);
ui/FilterDialog.cpp:  QString current = ui->cLens->currentText();
ui/FilterDialog.cpp:  ui->cLens->clear();
ui/FilterDialog.cpp:  ui->cLens->addItem("Any lens");
ui/FilterDialog.cpp:      ui->cLens->insertSeparator(1);
ui/FilterDialog.cpp:      ui->cLens->addItem(m);
ui/FilterDialog.cpp:      ui->cLens->setItemText(0, "Fixed lens");
ui/FilterDialog.cpp:      ui->cLens->setEnabled(false);
ui/FilterDialog.cpp:      ui->cLens->setCurrentIndex(2);
ui/FilterDialog.cpp:      ui->cLens->setEnabled(false);
ui/FilterDialog.cpp:      int idx = ui->cLens->findText(current);
ui/FilterDialog.cpp:        ui->cLens->setCurrentIndex(idx);
ui/FilterDialog.cpp:      ui->cLens->setEnabled(true);
ui/FilterDialog.cpp:    ui->cLens->setMaxVisibleItems(lenses.size()+2);
ui/FilterDialog.cpp:    ui->cLens->setItemText(0, "Select make or model first");
ui/FilterDialog.cpp:    ui->cLens->setEnabled(false);
ui/FilterDialog.cpp:  ui->collectionBox->clear();
ui/FilterDialog.cpp:  ui->collectionBox->addItem("None");
ui/FilterDialog.cpp:  ui->cMake->insertSeparator(1);
ui/FilterDialog.cpp:    ui->collectionBox->addItem(c);
ui/FilterDialog.cpp:  f.setCollection(ui->collectionBox->currentIndex()==0 ? ""
ui/FilterDialog.cpp:                  : ui->collectionBox->currentText());
ui/FilterDialog.cpp:  if (!ui->collection->isChecked())
ui/FilterDialog.cpp:  if (ui->cNone->isChecked())
ui/FilterDialog.cpp:  if (ui->cRed->isChecked())
ui/FilterDialog.cpp:  if (ui->cYellow->isChecked())
ui/FilterDialog.cpp:  if (ui->cGreen->isChecked())
ui/FilterDialog.cpp:  if (ui->cBlue->isChecked())
ui/FilterDialog.cpp:  if (ui->cPurple->isChecked())
ui/FilterDialog.cpp:  if (!ui->colorLabel->isChecked()) 
ui/FilterDialog.cpp:  f.setStarRating(ui->rMinBox->value(), ui->rMaxBox->value());
ui/FilterDialog.cpp:  if (!ui->starRating->isChecked())
ui/FilterDialog.cpp:  f.setStatus(ui->sAccepted->isChecked(),
ui/FilterDialog.cpp:	      ui->sUnset->isChecked(),
ui/FilterDialog.cpp:	      ui->sRejected->isChecked(),
ui/FilterDialog.cpp:	      ui->sNew->isChecked());
ui/FilterDialog.cpp:  if (!ui->status->isChecked())
ui/FilterDialog.cpp:  f.setCamera(ui->cMake->currentIndex()>0
ui/FilterDialog.cpp:	       ? ui->cMake->currentText() : QString(""),
ui/FilterDialog.cpp:	       ui->cCamera->currentIndex()>0
ui/FilterDialog.cpp:	       ? ui->cCamera->currentText() : QString(""),
ui/FilterDialog.cpp:	       ui->cLens->currentIndex()>0
ui/FilterDialog.cpp:	       ? ui->cLens->currentText() : QString(""));
ui/FilterDialog.cpp:  if (!ui->camera->isChecked())
ui/FilterDialog.cpp:  f.setDateRange(ui->dStart->date(), ui->dEnd->date());
ui/FilterDialog.cpp:  if (!ui->dateRange->isChecked())
ui/FilterDialog.cpp:  QTreeWidgetItem *fl = ui->location->currentItem();
ui/FilterDialog.cpp:  if (!ui->fileLocation->isChecked())
ui/FilterDialog.cpp:  if (!ui->tags->isChecked())
ui/FilterDialog.cpp:  for (auto s: ui->tagEditor->toPlainText().split(QRegExp("[,;&\n]+"))) {
ui/FilterDialog.cpp:  ui->collection->setChecked(f.hasCollection());
ui/FilterDialog.cpp:  int idx = ui->collectionBox->findText(f.collection());
ui/FilterDialog.cpp:  ui->collectionBox->setCurrentIndex(idx>0 ? idx : 0);
ui/FilterDialog.cpp:  ui->colorLabel->setChecked(f.hasColorLabels());
ui/FilterDialog.cpp:  ui->cNone->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::None));
ui/FilterDialog.cpp:  ui->cRed->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::Red));
ui/FilterDialog.cpp:  ui->cYellow->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::Yellow));
ui/FilterDialog.cpp:  ui->cGreen->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::Green));
ui/FilterDialog.cpp:  ui->cBlue->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::Blue));
ui/FilterDialog.cpp:  ui->cPurple->setChecked(f.includesColorLabel(PhotoDB::ColorLabel::Purple));
ui/FilterDialog.cpp:  ui->starRating->setChecked(f.hasStarRating());
ui/FilterDialog.cpp:  ui->rMinSlider->setValue(f.minStarRating());
ui/FilterDialog.cpp:  ui->rMaxSlider->setValue(f.maxStarRating());
ui/FilterDialog.cpp:  ui->status->setChecked(f.hasStatus());
ui/FilterDialog.cpp:  ui->sAccepted->setChecked(f.statusAccepted());
ui/FilterDialog.cpp:  ui->sRejected->setChecked(f.statusRejected());
ui/FilterDialog.cpp:  ui->sUnset->setChecked(f.statusUnset());
ui/FilterDialog.cpp:  ui->sNew->setChecked(f.statusNewImport());
ui/FilterDialog.cpp:  ui->camera->setChecked(f.hasCamera());
ui/FilterDialog.cpp:  idx = ui->cMake->findText(f.cameraMake());
ui/FilterDialog.cpp:  ui->cMake->setCurrentIndex(idx>1 ? idx : 0);
ui/FilterDialog.cpp:  idx = ui->cCamera->findText(f.cameraModel());
ui/FilterDialog.cpp:  ui->cCamera->setCurrentIndex(idx>1 ? idx : 0);
ui/FilterDialog.cpp:  idx = ui->cLens->findText(f.cameraLens());
ui/FilterDialog.cpp:  ui->cLens->setCurrentIndex(idx>1 ? idx : 0);
ui/FilterDialog.cpp:  ui->dateRange->setChecked(f.hasDateRange());
ui/FilterDialog.cpp:  ui->dStart->setDate(f.startDate());
ui/FilterDialog.cpp:  ui->dEnd->setDate(f.endDate());
ui/FilterDialog.cpp:  ui->fileLocation->setChecked(f.hasFileLocation());
ui/FilterDialog.cpp:  QList<QTreeWidgetItem *> its = ui->location->findItems(f.fileLocation(),
ui/FilterDialog.cpp:    ui->location->setCurrentItem(its.first(), 0,
ui/FilterDialog.cpp:  ui->tags->setChecked(f.hasTags());
ui/FilterDialog.cpp:  ui->tagEditor->setText(f.tags().join("\n"));
ui/FilterDialog.cpp:  ui->count->setText(QString::number(f.count()));
ui/FilterDialog.cpp:  QString make = ui->cMake->currentIndex()==0 ? ""
ui/FilterDialog.cpp:    : ui->cMake->currentText();
ui/FilterDialog.cpp:  QString make = ui->cMake->currentIndex()==0 ? ""
ui/FilterDialog.cpp:    : ui->cMake->currentText();
ui/FilterDialog.cpp:  QString model = ui->cCamera->currentIndex()==0 ? ""
ui/FilterDialog.cpp:    : ui->cCamera->currentText();
ui/FilterDialog.cpp:  ui->tagInterpretation->setText(f0.tagsInterpretation(tt));
ui/FilterDialog.cpp:  QDialogButtonBox::ButtonRole role = ui->buttonBox->buttonRole(b);
ui/FilterDialog.cpp:    ui->tagEditor->setText(taglist.join("\n"));
ui/FilterDialog.cpp:  ui->location->clear();
ui/FilterDialog.cpp:    ui->location->addTopLevelItem(it);
ui/FilterDialog.cpp:  bool all = ui->cRed->isChecked()
ui/FilterDialog.cpp:    &&  ui->cYellow->isChecked()
ui/FilterDialog.cpp:    &&  ui->cGreen->isChecked()
ui/FilterDialog.cpp:    &&  ui->cBlue->isChecked()
ui/FilterDialog.cpp:    &&  ui->cPurple->isChecked();
ui/FilterDialog.cpp:  ui->cNone->setChecked(false);
ui/FilterDialog.cpp:  ui->cRed->setChecked(!all);
ui/FilterDialog.cpp:  ui->cYellow->setChecked(!all);
ui/FilterDialog.cpp:  ui->cGreen->setChecked(!all);
ui/FilterDialog.cpp:  ui->cBlue->setChecked(!all);
ui/FilterDialog.cpp:  ui->cPurple->setChecked(!all);
ui/PurgeDialog.cpp:  ui->setupUi(this);
ui/PurgeDialog.cpp:  ui->warningIcon->
ui/PurgeDialog.cpp:  ui->warningContainer->hide();
ui/PurgeDialog.cpp:    ui->mainLabelShort->hide();
ui/PurgeDialog.cpp:    QString txt = ui->mainLabelLong->text();
ui/PurgeDialog.cpp:    ui->mainLabelLong->setText(txt);
ui/PurgeDialog.cpp:      QString txt = ui->purgeLabel->text();
ui/PurgeDialog.cpp:      ui->purgeLabel->setText(txt);
ui/PurgeDialog.cpp:        QString txt = ui->deleteLabel->text();
ui/PurgeDialog.cpp:        ui->deleteLabel->setText(txt);
ui/PurgeDialog.cpp:        ui->deleteContainer->hide();
ui/PurgeDialog.cpp:      ui->purgeContainer->hide();
ui/PurgeDialog.cpp:      ui->deleteContainer->hide();
ui/PurgeDialog.cpp:    ui->mainLabelLong->hide();
ui/PurgeDialog.cpp:    QString txt = ui->mainLabelShort->text();
ui/PurgeDialog.cpp:    ui->mainLabelShort->setText(txt);
ui/PurgeDialog.cpp:    ui->purgeContainer->hide();
ui/PurgeDialog.cpp:    ui->purgeCheck->setChecked(true);
ui/PurgeDialog.cpp:      ui->deleteSpacer->hide();
ui/PurgeDialog.cpp:      QString txt = ui->deleteLabel->text();
ui/PurgeDialog.cpp:      ui->deleteLabel->setText(txt);
ui/PurgeDialog.cpp:      ui->deleteContainer->hide();
ui/PurgeDialog.cpp:    ui->mainLabelLong->hide();
ui/PurgeDialog.cpp:    ui->mainLabelShort->hide();    
ui/PurgeDialog.cpp:    ui->purgeContainer->hide();
ui/PurgeDialog.cpp:    ui->deleteContainer->hide();
ui/PurgeDialog.cpp:    QString txt = ui->oldLabel->text();
ui/PurgeDialog.cpp:    ui->oldLabel->setText(txt);
ui/PurgeDialog.cpp:      QString txt = ui->deleteOldLabel->text();
ui/PurgeDialog.cpp:      ui->deleteOldLabel->setText(txt);
ui/PurgeDialog.cpp:      ui->oldContainer->hide();
ui/PurgeDialog.cpp:    txt = ui->restoreButton->text();
ui/PurgeDialog.cpp:    ui->restoreButton->setText(txt);
ui/PurgeDialog.cpp:    ui->oldLabel->hide();
ui/PurgeDialog.cpp:    ui->oldContainer->hide();
ui/PurgeDialog.cpp:    ui->restoreButton->hide();
ui/PurgeDialog.cpp:  connect(ui->okButton, SIGNAL(clicked()), SLOT(accept()));
ui/PurgeDialog.cpp:  connect(ui->cancelButton, SIGNAL(clicked()), SLOT(reject()));
ui/PurgeDialog.cpp:  connect(ui->restoreButton, SIGNAL(clicked()), SLOT(restoreClicked()));
ui/PurgeDialog.cpp:  connect(ui->purgeCheck, SIGNAL(toggled(bool)), SLOT(deleteToggled()));
ui/PurgeDialog.cpp:  connect(ui->deleteCheck, SIGNAL(toggled(bool)), SLOT(deleteToggled()));
ui/PurgeDialog.cpp:  connect(ui->deleteOldCheck, SIGNAL(toggled(bool)), SLOT(deleteToggled()));
ui/PurgeDialog.cpp:  if ((ui->deleteCheck->isChecked() && ui->deleteCheck->isEnabled())
ui/PurgeDialog.cpp:      || ui->deleteOldCheck->isChecked()) 
ui/PurgeDialog.cpp:    ui->warningContainer->show();
ui/PurgeDialog.cpp:    ui->warningContainer->hide();
ui/PurgeDialog.cpp:  if (dlg.ui->purgeCheck->isChecked()) {
ui/PurgeDialog.cpp:    if (dlg.ui->deleteCheck->isChecked()) 
ui/PurgeDialog.cpp:    if (dlg.ui->deleteOldCheck->isChecked()) 
ui/PurgeDialog.cpp:  if (dlg.ui->purgeCheck->isChecked()) {
ui/PurgeDialog.cpp:    if (dlg.ui->deleteCheck->isChecked()) {
ui/PurgeDialog.cpp:    if (dlg.ui->deleteOldCheck->isChecked()) {
ui/RestoreDialog.cpp:  ui->setupUi(this);
ui/RestoreDialog.cpp:  QString txt = ui->mainLabel->text();
ui/RestoreDialog.cpp:  ui->mainLabel->setText(txt);
ui/RestoreDialog.cpp:  txt = ui->markReject->text();
ui/RestoreDialog.cpp:  ui->markReject->setText(txt);
ui/RestoreDialog.cpp:  txt = ui->markUndecided->text();
ui/RestoreDialog.cpp:  ui->markUndecided->setText(txt);
ui/RestoreDialog.cpp:  txt = ui->colorCheck->text();
ui/RestoreDialog.cpp:  ui->colorCheck->setText(txt);
ui/RestoreDialog.cpp:    PhotoDB::AcceptReject accrej = dlg.ui->markReject->isChecked()
ui/RestoreDialog.cpp:    if (dlg.ui->colorCheck->isChecked()) {
ui/RestoreDialog.cpp:      if (dlg.ui->red->isChecked())
ui/RestoreDialog.cpp:      else if (dlg.ui->yellow->isChecked())
ui/RestoreDialog.cpp:      else if (dlg.ui->green->isChecked())
ui/RestoreDialog.cpp:      else if (dlg.ui->blue->isChecked())
ui/RestoreDialog.cpp:      else if (dlg.ui->purple->isChecked())
