{ "typ": "page",
  "cre": "2016-05-03T18:19:09",
  "mod": "2016-05-03T19:00:13",
  "cui": "9b713b3720603e53",
  "stampTime": 0,
  "startPage": 56,
  "unlocked": false,
  "uuid": "ad443b3f",
  "cc": [
    { "typ": "resources",
      "cre": "2016-05-03T18:19:09",
      "mod": "2016-05-03T18:19:09",
      "uuid": "8950eb1e"
    },
    { "typ": "title",
      "cre": "2016-05-03T18:19:09",
      "mod": "2016-05-03T18:19:13",
      "uuid": "d80db726",
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:19:09",
          "mod": "2016-05-03T18:19:13",
          "lines": [
            0
          ],
          "text": "Layers",
          "uuid": "21ee7231"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:19:14",
      "mod": "2016-05-03T18:21:50",
      "h": 142.996,
      "ind": 0,
      "sheet": 0,
      "split": [ ],
      "uuid": "defe5aeb",
      "y0": 72.0,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:19:14",
          "mod": "2016-05-03T18:21:50",
          "lines": [
            0,
            67,
            133,
            196,
            257,
            317
          ],
          "text": "I’d like to be able to apply adjustments in layers. Right now, the adjustments table simply has a list of (key,value) pairs for each version. It would be easy to add a layer column to this table. Then, Adjuster could apply adjustments on a per layer basis. That is not trivial right now, because the various retrieve functions all pass a single Adjustments structure.",
          "uuid": "db43cf12",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:19:30",
              "mod": "2016-05-03T18:19:30",
              "end": 78,
              "start": 67,
              "style": 1,
              "uuid": "90df6f61"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:19:58",
              "mod": "2016-05-03T18:19:58",
              "end": 173,
              "start": 168,
              "style": 1,
              "uuid": "5f486ab4"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:21:10",
              "mod": "2016-05-03T18:21:10",
              "end": 261,
              "start": 257,
              "style": 1,
              "uuid": "6bc2e540"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:21:40",
              "mod": "2016-05-03T18:21:40",
              "end": 316,
              "start": 308,
              "style": 1,
              "uuid": "6be046c9"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:21:47",
              "mod": "2016-05-03T18:21:47",
              "end": 356,
              "start": 345,
              "style": 1,
              "uuid": "77c95ebd"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:22:08",
      "mod": "2016-05-03T18:26:58",
      "h": 73.498,
      "ind": 1,
      "sheet": 0,
      "split": [ ],
      "uuid": "79e27e94",
      "y0": 214.996,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:22:08",
          "mod": "2016-05-03T18:26:58",
          "lines": [
            0,
            64,
            126
          ],
          "text": "Several things will need to happen. First, it is worth pointing out that some adjustments can only happen globally (in “layer 0”): cropping, rotating, other distortions. ",
          "uuid": "715bd290"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:22:08",
      "mod": "2016-05-03T18:26:58",
      "h": 281.992,
      "ind": 1,
      "sheet": 0,
      "split": [ ],
      "uuid": "79e27e94",
      "y0": 288.494,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:22:08",
          "mod": "2016-05-03T18:26:58",
          "lines": [
            0,
            57,
            117,
            182,
            245,
            310,
            370,
            430,
            494,
            561,
            619,
            675
          ],
          "text": "The next step is to augment AdjusterTile to have a layer number, or even a map of layers to Adjustments. Adjustments would be performed layer by layer, and within each layer, in the order currently used. Thus, I think that a map of layer number to Adjustments would fully specify the state of an AdjusterTile, and it would be easy to figure out whether a given tile can serve as the source of a request: All deeper layers must be exactly as in the request, and the top layer must be equivalent up to the relevant point in the chain. This is conservative, since some adjustments do commute, and nonoverlapping layers do not affect each other, but I can leave that for a later improvement.",
          "uuid": "715bd290"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:27:00",
      "mod": "2016-05-03T18:30:33",
      "h": 235.66,
      "ind": 1,
      "sheet": 0,
      "split": [
        115.83
      ],
      "uuid": "50eefdf3",
      "y0": 570.486,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:27:00",
          "mod": "2016-05-03T18:30:33",
          "lines": [
            0,
            54,
            113,
            177,
            239,
            302,
            355,
            415,
            482,
            539
          ],
          "text": "Then, Adjuster’s apply methods must all be made layer-aware. At this level, a layer is simply an alpha mask. But probably, they should be internally represented in vector form, and converted to pixmap on the spot. That is because cropping etc. affect that conversion. I would think that layer geometry should be specified in source image coordinates. But obviously, layer adjustments will be applied after geometry adjustments (which, after all, are applied to layer 0), and so the alpha mask should be generated in the shape of the final image.",
          "uuid": "cc13c9b3",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:27:15",
              "mod": "2016-05-03T18:27:15",
              "end": 22,
              "start": 17,
              "style": 1,
              "uuid": "6fad0842"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:29:53",
              "mod": "2016-05-03T18:29:53",
              "end": 405,
              "start": 400,
              "style": 1,
              "uuid": "c14d0385"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:31:05",
      "mod": "2016-05-03T18:35:11",
      "h": 166.162,
      "ind": 1,
      "sheet": 1,
      "split": [ ],
      "uuid": "75fa8cf1",
      "y0": 191.83,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:31:05",
          "mod": "2016-05-03T18:35:11",
          "lines": [
            0,
            57,
            118,
            176,
            236,
            302,
            357
          ],
          "text": "How should layers be defined? I am sure that it would be useful to define them based on pixel properties such as (low-pass filtered) hue or lightness. But for now, geometry is enough. I will allow multiple ways to specify geometry. The first will be a simple gradient defined by two (x,y) points. This is useful for the common use case of posthoc graduated neutral density filtering. ",
          "uuid": "b67a2329"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:31:05",
      "mod": "2016-05-03T18:36:06",
      "h": 166.162,
      "ind": 1,
      "sheet": 1,
      "split": [ ],
      "uuid": "75fa8cf1",
      "y0": 357.992,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:31:05",
          "mod": "2016-05-03T18:36:06",
          "lines": [
            0,
            64,
            130,
            191,
            255,
            317,
            376
          ],
          "text": "The UI for this is relatively straightforward: I would create a new “Layers” tab with a “+” button, a list of defined layers, and a “–” button. The “+” button would open a simple dialog that allows selecting the layer type. For now, the only type will be “linear gradient.” Reordering layers could be useful, but not right now. There should be a button to visualize the alpha mask.",
          "uuid": "b67a2329",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:35:41",
              "mod": "2016-05-03T18:35:41",
              "end": 297,
              "start": 292,
              "style": 1,
              "uuid": "74e08285"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:36:06",
      "mod": "2016-05-03T18:38:19",
      "h": 189.328,
      "ind": 1,
      "sheet": 1,
      "split": [
        162.162
      ],
      "uuid": "4517905c",
      "y0": 524.154,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:36:06",
          "mod": "2016-05-03T18:38:19",
          "lines": [
            0,
            47,
            110,
            171,
            229,
            290,
            345,
            402
          ],
          "text": "Beyond that, there should be a straightforward SlideOverlay that shows the control points of the gradient and allows the user to drag them around. This same overlay could also show the alpha mask when requested. Either by simply replacing the image with a grayscale of the mask, or in some more sophisticated manner that I have yet to think of. Something like Gimp’s semitransparent red selection mask could work.",
          "uuid": "6dd4ec31"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:38:22",
      "mod": "2016-05-03T18:43:44",
      "h": 189.328,
      "ind": 1,
      "sheet": 2,
      "split": [ ],
      "uuid": "2f6f728d",
      "y0": 99.166,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:38:22",
          "mod": "2016-05-03T18:43:44",
          "lines": [
            0,
            57,
            120,
            180,
            236,
            298,
            361,
            426
          ],
          "text": "Other geometries, to be implemented later, would include an ellipse with adjustable x and y radius and transition rate. Three control points would be needed for that. (And one dof would be redundant*.) A completely free-style path that defines a non–straight line for a a graduated ND filter would be useful. Again, sharpness of transition needs to be defined, and by dragging that special control point to either side of the curve, polarity of the filter would be defined:",
          "uuid": "3857062d",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:39:43",
              "mod": "2016-05-03T18:39:43",
              "end": 199,
              "start": 198,
              "style": 6,
              "uuid": "340f7631"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:39:43",
              "mod": "2016-05-03T18:39:43",
              "end": 199,
              "start": 198,
              "style": 5,
              "uuid": "4554ad0e"
            }
          ]
        },
        { "typ": "footnote",
          "cre": "2016-05-03T18:39:43",
          "mod": "2016-05-03T18:41:17",
          "h": 54.301,
          "ind": 1,
          "sheet": 2,
          "split": [ ],
          "tag": "*",
          "uuid": "05b62d30",
          "y0": 653.699,
          "cc": [
            { "typ": "text",
              "cre": "2016-05-03T18:39:43",
              "mod": "2016-05-03T18:41:17",
              "lines": [
                0,
                76,
                150
              ],
              "text": "Also, one dof is redundant for the linear gradient, but for UI consistency, storing the parameters as two points is desirable. That way, the user can place the control points in some innoccuous [sp.?] part of the image.",
              "uuid": "3d516db9"
            }
          ]
        }
      ]
    },
    { "typ": "gfxblock",
      "cre": "2016-05-03T18:43:49",
      "mod": "2016-05-03T18:46:23",
      "h": 109.707,
      "sheet": 2,
      "split": [ ],
      "uuid": "ab63f670",
      "xref": 0.0,
      "y0": 288.494,
      "yref": 15.8994,
      "cc": [
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:49",
          "mod": "2016-05-03T18:43:49",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "13eb9526",
          "x": 111.623,
          "y": 30.3994
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:50",
          "mod": "2016-05-03T18:43:50",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "023e63de",
          "x": 63.2746,
          "y": 46.8585
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:52",
          "mod": "2016-05-03T18:43:52",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "4d867d07",
          "x": 164.086,
          "y": 57.6145
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:54",
          "mod": "2016-05-03T18:46:23",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "7d74924a",
          "x": 231.98,
          "y": 74.0735
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:55",
          "mod": "2016-05-03T18:43:55",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "3b6a56a0",
          "x": 311.189,
          "y": 59.6718
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:57",
          "mod": "2016-05-03T18:43:57",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "297d0e27",
          "x": 429.488,
          "y": 34.9833
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:43:59",
          "mod": "2016-05-03T18:43:59",
          "color": "#ee2200",
          "shape": 0,
          "size": 4.5,
          "uuid": "fcbb93da",
          "x": 2.58197,
          "y": 65.844
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:44:05",
          "mod": "2016-05-03T18:44:05",
          "color": "#005f00",
          "shape": 0,
          "size": 4.5,
          "uuid": "8267a334",
          "x": 241.238,
          "y": 36.012
        },
        { "typ": "gfxsketch",
          "cre": "2016-05-03T18:44:12",
          "mod": "2016-05-03T18:44:22",
          "color": "#ee2200",
          "lineWidth": 1.5,
          "uuid": "136ed965",
          "x": 4.63934,
          "xx": [
            0.0,
            3.08607,
            5.14344,
            7.20082,
            10.2869,
            13.373,
            16.459,
            19.5451,
            23.6598,
            26.7459,
            29.832,
            32.918,
            36.0041,
            39.0902,
            42.1762,
            45.2623,
            48.3484,
            51.4344,
            54.5205,
            57.6066,
            60.6926,
            63.7787,
            66.8648,
            69.9508,
            73.0369,
            76.123,
            79.209,
            82.2951,
            84.3525,
            87.4385,
            90.5246,
            93.6107,
            96.6967,
            99.7828,
            102.869,
            105.955,
            109.041,
            112.127,
            115.213,
            118.299,
            121.385,
            124.471,
            127.557,
            130.643,
            132.701,
            135.787,
            138.873,
            141.959,
            145.045,
            148.131,
            151.217,
            154.303,
            156.361,
            160.475,
            163.561,
            166.648,
            169.734,
            172.82,
            175.906,
            178.992,
            182.078,
            185.164,
            188.25,
            191.336,
            194.422,
            197.508,
            200.594,
            203.68,
            206.766,
            209.852,
            212.939,
            217.053,
            217.053,
            217.053,
            220.139,
            223.225,
            226.311,
            229.398,
            233.512,
            236.598,
            239.684,
            242.77,
            245.857,
            248.943,
            252.029,
            255.115,
            258.201,
            261.287,
            264.373,
            267.459,
            270.545,
            273.631,
            276.717,
            279.803,
            282.889,
            285.975,
            289.061,
            292.148,
            295.234,
            298.32,
            301.406,
            304.492,
            307.578,
            310.664,
            313.75,
            316.836,
            319.922,
            323.008,
            326.094,
            329.18,
            332.266,
            335.352,
            338.439,
            341.525,
            344.611,
            347.697,
            350.783,
            353.869,
            357.984,
            361.07,
            364.156,
            367.242,
            370.328,
            373.414,
            376.5,
            379.586,
            382.672,
            385.758,
            388.844,
            390.902,
            393.988,
            397.074,
            400.16,
            403.246,
            406.332,
            409.418,
            412.504,
            414.561,
            417.648,
            418.676,
            421.762,
            424.848,
            426.906
          ],
          "y": 65.844,
          "yy": [
            0.0,
            0.0,
            -3.08607,
            -6.17213,
            -6.17213,
            -6.17213,
            -6.17213,
            -6.17213,
            -7.20082,
            -9.2582,
            -10.2869,
            -10.2869,
            -10.2869,
            -10.2869,
            -11.3156,
            -11.3156,
            -11.3156,
            -12.3443,
            -13.373,
            -15.4303,
            -15.4303,
            -15.4303,
            -16.459,
            -18.5164,
            -19.5451,
            -21.6025,
            -23.6598,
            -25.7172,
            -28.8033,
            -31.8893,
            -33.9467,
            -36.0041,
            -37.0328,
            -37.0328,
            -37.0328,
            -37.0328,
            -37.0328,
            -37.0328,
            -37.0328,
            -34.9754,
            -32.918,
            -31.8893,
            -29.832,
            -26.7459,
            -23.6598,
            -23.6598,
            -20.5738,
            -19.5451,
            -17.4877,
            -15.4303,
            -14.4016,
            -12.3443,
            -8.22951,
            -6.17213,
            -5.14344,
            -5.14344,
            -5.14344,
            -4.11475,
            -4.11475,
            -3.08607,
            -3.08607,
            -2.05738,
            -2.05738,
            -2.05738,
            0.0,
            0.0,
            1.02869,
            1.02869,
            1.02869,
            1.02869,
            1.02869,
            2.05738,
            5.14344,
            8.22951,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            9.2582,
            8.22951,
            7.20082,
            6.17213,
            5.14344,
            3.08607,
            2.05738,
            1.02869,
            1.02869,
            1.02869,
            -1.02869,
            -2.05738,
            -4.11475,
            -4.11475,
            -4.11475,
            -4.11475,
            -4.11475,
            -4.11475,
            -4.11475,
            -4.11475,
            -5.14344,
            -5.14344,
            -5.14344,
            -6.17213,
            -7.20082,
            -8.22951,
            -9.2582,
            -10.2869,
            -10.2869,
            -11.3156,
            -11.3156,
            -12.3443,
            -12.3443,
            -13.373,
            -15.4303,
            -16.459,
            -17.4877,
            -18.5164,
            -19.5451,
            -20.5738,
            -21.6025,
            -21.6025,
            -24.6885,
            -24.6885,
            -26.7459,
            -26.7459,
            -26.7459,
            -26.7459,
            -26.7459,
            -27.7746,
            -30.8607,
            -32.918,
            -36.0041,
            -36.0041,
            -36.0041,
            -36.0041
          ]
        },
        { "typ": "gfxsketch",
          "cre": "2016-05-03T18:44:28",
          "mod": "2016-05-03T18:44:29",
          "color": "#005f00",
          "lineWidth": 1.5,
          "uuid": "44f70a30",
          "x": 248.439,
          "xx": [
            0.0,
            0.0,
            0.0,
            -1.02869,
            -1.02869,
            -1.02869,
            -2.05738,
            -3.08607,
            -4.11475,
            -4.11475,
            -5.14344,
            -5.14344,
            -8.22951
          ],
          "y": 75.1022,
          "yy": [
            0.0,
            -3.08607,
            -6.17213,
            -10.2869,
            -15.4303,
            -18.5164,
            -21.6025,
            -24.6885,
            -27.7746,
            -30.8607,
            -33.9467,
            -37.0328,
            -37.0328
          ]
        },
        { "typ": "gfxmark",
          "cre": "2016-05-03T18:45:50",
          "mod": "2016-05-03T18:45:55",
          "color": "#00d400",
          "shape": 0,
          "size": 4.5,
          "uuid": "ae30941e",
          "x": 257.697,
          "y": 111.106
        },
        { "typ": "gfxsketch",
          "cre": "2016-05-03T18:46:01",
          "mod": "2016-05-03T18:46:02",
          "color": "#00d400",
          "lineWidth": 1.5,
          "uuid": "253fa783",
          "x": 250.496,
          "xx": [
            0.0,
            1.02869,
            2.05738,
            2.05738,
            2.05738,
            2.05738,
            3.08607,
            4.11475,
            4.11475,
            4.11475,
            4.11475
          ],
          "y": 77.1595,
          "yy": [
            0.0,
            3.08607,
            6.17213,
            11.3156,
            15.4303,
            18.5164,
            21.6025,
            24.6885,
            27.7746,
            30.8607,
            32.918
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:44:32",
      "mod": "2016-05-03T18:47:09",
      "h": 73.498,
      "ind": 0,
      "sheet": 2,
      "split": [ ],
      "uuid": "8f62b0a2",
      "y0": 398.201,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:44:32",
          "mod": "2016-05-03T18:47:09",
          "lines": [
            0,
            59,
            108
          ],
          "text": "(The lines may or may not be shown and would obviously not be ragged.) The ends of such an open curve would automatically snap to the nearest edge.",
          "uuid": "2eedb09d"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:45:01",
      "mod": "2016-05-03T18:48:23",
      "h": 119.83,
      "ind": 1,
      "sheet": 2,
      "split": [ ],
      "uuid": "07b8ec68",
      "y0": 471.699,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:45:01",
          "mod": "2016-05-03T18:48:23",
          "lines": [
            0,
            63,
            128,
            192,
            258
          ],
          "text": "Lastly, a free-style closed region would be useful, again with a special control point to adjust sharpness of transition. Where control points are along an edge, they will be understood to be corner points; other control points will be smooth. I don’t think I want full bezier curves; interpolation should be automatic.",
          "uuid": "98862024"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:49:08",
      "mod": "2016-05-03T18:52:59",
      "h": 235.66,
      "ind": 1,
      "sheet": 2,
      "split": [
        46.332
      ],
      "uuid": "9c812a8b",
      "y0": 591.529,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:49:08",
          "mod": "2016-05-03T18:52:59",
          "lines": [
            0,
            62,
            123,
            188,
            253,
            320,
            378,
            446,
            511,
            565
          ],
          "text": "This will require a new layers table that has version, order, layerid, layertype columns. And a new layerpoints table that has layerid, point order, x, y columns. (It is somewhat shocking how ineffecient relational databases are for this sort of thing. It might actually be attractive to store points as a single binary blob, that is, as a QVector<float>, in the layers table.) Coordinates could be normalized s.t. x = 0 at left, 1 at right; y = 0 at top, 1 at bottom. Or they could simply be pixel coordinates in the source image. That is probably better, because interpolation should be isotropic.",
          "uuid": "222fba99",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:49:14",
              "mod": "2016-05-03T18:49:14",
              "end": 30,
              "start": 24,
              "style": 1,
              "uuid": "9ad5d688"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:49:40",
              "mod": "2016-05-03T18:49:40",
              "end": 111,
              "start": 100,
              "style": 1,
              "uuid": "bda55bf0"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:51:02",
              "mod": "2016-05-03T18:51:02",
              "end": 369,
              "start": 363,
              "style": 1,
              "uuid": "7ed00d4f"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:51:58",
              "mod": "2016-05-03T18:51:58",
              "end": 416,
              "start": 415,
              "style": 1,
              "uuid": "1dbae57d"
            },
            { "typ": "markup",
              "cre": "2016-05-03T18:52:03",
              "mod": "2016-05-03T18:52:03",
              "end": 443,
              "start": 442,
              "style": 1,
              "uuid": "d06fe319"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:53:15",
      "mod": "2016-05-03T18:55:29",
      "h": 189.328,
      "ind": 1,
      "sheet": 3,
      "split": [ ],
      "uuid": "5046ba33",
      "y0": 261.328,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:53:15",
          "mod": "2016-05-03T18:55:29",
          "lines": [
            0,
            54,
            117,
            177,
            243,
            301,
            362,
            423
          ],
          "text": "What happens when control points are outside the crop area? I can worry about that later. For the linear gradient, I could automatically move the points along the gradient to a place inside the image. I will not support layers that are not at 0%/100% at some edge. If you want that, you should simply dial down the strength of the adjustments. Sorry. However, a global “opacity” setting for each layer could be useful, and could be implemented as a slider in the Layers tab.",
          "uuid": "6ab7340f",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:54:25",
              "mod": "2016-05-03T18:54:25",
              "end": 211,
              "start": 208,
              "style": 1,
              "uuid": "682f63d2"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:55:35",
      "mod": "2016-05-03T18:56:17",
      "h": 73.498,
      "ind": 1,
      "sheet": 3,
      "split": [ ],
      "uuid": "5904bd48",
      "y0": 450.656,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:55:35",
          "mod": "2016-05-03T18:56:17",
          "lines": [
            0,
            58,
            123
          ],
          "text": "Layer controls (i.e., the slide overlay) would be visible whenever the Layers tab is open, and clicking on a layer in that tab would determine which layer is shown. ",
          "uuid": "4566bd07"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:56:25",
      "mod": "2016-05-03T18:57:00",
      "h": 73.498,
      "ind": 1,
      "sheet": 3,
      "split": [ ],
      "uuid": "bffc0901",
      "y0": 524.154,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:56:25",
          "mod": "2016-05-03T18:57:00",
          "lines": [
            0,
            59,
            123
          ],
          "text": "Reordering layers could be useful, because editing the top layer is significantly faster thanks to the AdjusterTile stages system in Adjuster.",
          "uuid": "4f09c738"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:57:05",
      "mod": "2016-05-03T18:58:33",
      "h": 142.996,
      "ind": 1,
      "sheet": 3,
      "split": [
        92.664
      ],
      "uuid": "35d96617",
      "y0": 597.652,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:57:05",
          "mod": "2016-05-03T18:58:33",
          "lines": [
            0,
            57,
            117,
            175,
            235,
            297
          ],
          "text": "The first step should be to implement a rough version of the Layers tab, with + and – buttons, along with the layers table. Then, the overlay can be made, and I can study the control points of the linear gradient layer along with mask generation. Once that is done, modifications to AdjusterTile, Adjuster, InterruptableAdjuster, etc. can be made.",
          "uuid": "88ab06f0",
          "cc": [
            { "typ": "markup",
              "cre": "2016-05-03T18:57:31",
              "mod": "2016-05-03T18:57:31",
              "end": 116,
              "start": 110,
              "style": 1,
              "uuid": "974366cb"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:58:51",
      "mod": "2016-05-03T18:59:47",
      "h": 50.332,
      "ind": 1,
      "sheet": 4,
      "split": [ ],
      "uuid": "7409f685",
      "y0": 122.332,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:58:51",
          "mod": "2016-05-03T18:59:47",
          "lines": [
            0,
            54
          ],
          "text": "(Note that findParentStage will also have to be layer-aware.)",
          "uuid": "da29568c"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2016-05-03T18:59:33",
      "mod": "2016-05-03T19:00:13",
      "h": 50.332,
      "ind": 1,
      "sheet": 4,
      "split": [ ],
      "uuid": "a7d4c05b",
      "y0": 172.664,
      "cc": [
        { "typ": "text",
          "cre": "2016-05-03T18:59:33",
          "mod": "2016-05-03T19:00:13",
          "lines": [
            0,
            62
          ],
          "text": "I think that is a relatively straightforward path with doable intermediate steps. Especially the first part.",
          "uuid": "6ed8c563"
        }
      ]
    }
  ]
}
