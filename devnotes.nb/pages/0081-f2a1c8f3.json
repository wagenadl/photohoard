{ "typ": "page",
  "cre": "2024-08-23T07:39:28.676",
  "mod": "2024-08-23T07:48:39.904",
  "cui": "2edabb2b1502c998",
  "stampTime": 0,
  "startPage": 81,
  "unlocked": false,
  "uuid": "f2a1c8f3",
  "cc": [
    { "typ": "resources",
      "cre": "2024-08-23T07:39:28.670",
      "mod": "2024-08-23T07:39:28.728",
      "uuid": "302047fc",
      "cc": [
        { "typ": "res",
          "cre": "2024-08-23T07:39:28.722",
          "mod": "2024-08-23T07:39:28.728",
          "archive": "80_-5e5bca22.html",
          "desc": "",
          "preview": "80_-5e5bca22p.png",
          "source": "page://0.0.0.80/e4e658fe/2",
          "tag": "80",
          "title": "",
          "uuid": "5e5bca22"
        }
      ]
    },
    { "typ": "title",
      "cre": "2024-08-23T07:39:28.678",
      "mod": "2024-08-23T07:39:28.729",
      "uuid": "72cab508",
      "cc": [
        { "typ": "text",
          "cre": "2024-08-23T07:39:28.678",
          "mod": "2024-08-23T07:39:28.729",
          "lines": [
            0
          ],
          "text": "Database use in Photohoard (cont’d)",
          "uuid": "0b627b10",
          "cc": [
            { "typ": "gfxnote",
              "cre": "2024-08-23T07:39:28.719",
              "mod": "2024-08-23T07:39:28.729",
              "dx": 0.0,
              "dy": 0.0,
              "sheet": 0,
              "textWidth": 0.0,
              "uuid": "1c5fe95d",
              "x": -46.8281,
              "y": 45.06,
              "cc": [
                { "typ": "text",
                  "cre": "2024-08-23T07:39:28.719",
                  "mod": "2024-08-23T07:39:28.722",
                  "lines": [
                    0
                  ],
                  "text": "p. 80 >",
                  "uuid": "c36af660",
                  "cc": [
                    { "typ": "markup",
                      "cre": "2024-08-23T07:39:28.722",
                      "mod": "2024-08-23T07:39:28.722",
                      "end": 5,
                      "res": [
                        "80"
                      ],
                      "start": 3,
                      "style": 4,
                      "uuid": "46dc670d"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2024-08-23T07:39:31.100",
      "mod": "2024-08-23T07:42:29.985",
      "h": 189.328,
      "ind": 0,
      "sheet": 0,
      "split": [ ],
      "uuid": "d9959aab",
      "y0": 72.0,
      "cc": [
        { "typ": "text",
          "cre": "2024-08-23T07:39:31.100",
          "mod": "2024-08-23T07:42:29.985",
          "lines": [
            0,
            59,
            118,
            178,
            242,
            300,
            360,
            421
          ],
          "text": "I did switch to WAL, using a PRAGMA in Database::open, and defanged the lockForReading() mechanism. I’ll test if that works. The documentation of SQLite is not very clear on the topic. I may have to switch to manual WAL clearing. If so, I’ll make a separate thread for that, and make all the threads increment a mutex-protected integer when they are not idle. The clearing thread then takes the mutex, tests the integer, and, if zero, does the clearing while holding the mutex:",
          "uuid": "1ffac88f",
          "cc": [
            { "typ": "markup",
              "cre": "2024-08-23T07:39:31.963",
              "mod": "2024-08-23T07:39:31.963",
              "end": 5,
              "start": 2,
              "style": 1,
              "uuid": "2a343ae1"
            },
            { "typ": "markup",
              "cre": "2024-08-23T07:41:22.190",
              "mod": "2024-08-23T07:41:22.190",
              "end": 287,
              "start": 284,
              "style": 1,
              "uuid": "0a3b3c1d"
            }
          ]
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2024-08-23T07:43:05.581",
      "mod": "2024-08-23T07:45:22.842",
      "h": 197.347,
      "ind": 2,
      "sheet": 0,
      "split": [ ],
      "uuid": "de93a7ad",
      "y0": 261.328,
      "cc": [
        { "typ": "text",
          "cre": "2024-08-23T07:43:05.581",
          "mod": "2024-08-23T07:45:22.842",
          "lines": [
            0,
            21,
            32,
            53,
            71,
            91,
            146,
            201,
            224,
            295,
            319
          ],
          "text": "class ClearingLock {\n  public: \n     bool trylock();\n     void lock();\n     void unlock();\n     void increment() { lock(); counter++; unlock(); }\n     void decrement() { lock(); counter--; unlock(); }\n     bool trytake() { \n        if (trylock()) { if (counter==0) return true; else unlock(); }\n        return false; }\n};",
          "uuid": "54eb3a8f"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2024-08-23T07:46:06.743",
      "mod": "2024-08-23T07:46:37.807",
      "h": 73.498,
      "ind": 1,
      "sheet": 0,
      "split": [ ],
      "uuid": "b2d30189",
      "y0": 458.675,
      "cc": [
        { "typ": "text",
          "cre": "2024-08-23T07:46:06.743",
          "mod": "2024-08-23T07:46:37.807",
          "lines": [
            0,
            60,
            122
          ],
          "text": "To make this better, I'll have the gui thread keep track of user activity. Only when there has been none for 2 s will the clearing thread get a chance. ",
          "uuid": "c7d6cdaa"
        }
      ]
    },
    { "typ": "textblock",
      "cre": "2024-08-23T07:47:16.412",
      "mod": "2024-08-23T07:48:39.904",
      "h": 119.83,
      "ind": 1,
      "sheet": 0,
      "split": [ ],
      "uuid": "49766261",
      "y0": 532.173,
      "cc": [
        { "typ": "text",
          "cre": "2024-08-23T07:47:16.412",
          "mod": "2024-08-23T07:48:39.904",
          "lines": [
            0,
            53,
            120,
            180,
            238
          ],
          "text": "The gui thread will need to be protected by the same integer, unless it itself is the clearing thread. This may require some performance testing. Also, not entirely clear where to hook into the Qt processing loop to implement either idle testing or integer inc/dec.",
          "uuid": "b52d61f7"
        }
      ]
    }
  ]
}
